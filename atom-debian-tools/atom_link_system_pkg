#!/usr/bin/perl
#
# atom_link_system_pkg
#
# Links a system wide Atom package (generated by atom2debian) to the current
# user HOME. It also links all the needed dependencies.
#
# Usage:
# $ atom_link_system_pkg PACKAGE
#
# Copyright (c) 2016 by Salvador E. Tropea <salvador@inti.gob.ar>
# Copyright (c) 2016 by Instituto Nacional de Tecnologia Industrial
#                       Centro de Micro y Nanoelectrónica (CMNB)
#
# This package is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This package is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>
#
use JSON;

$atom_apm='/usr/share/atom/resources/app/apm/bin/apm';
$lib='/usr/lib/atom/packages/';

die "Atom must be installed" unless -e $atom_apm;

die "Usage: atom_link_system_pkg PACKAGE\n" if scalar(@ARGV)!=1;

$pkg=$ARGV[0];
print "Trying to link '$pkg' from system to your home\n";

$home=$ENV{'HOME'};
$dir_dest="$home/.atom";
Create();
$dir_dest.='/packages';
Create();

Process($pkg);
print "That's all\n";
0;

sub Process
{
 my $name=shift @_;

 my $ori="$lib/$name";
 unless (-d $ori)
   {
    print "\nError: Package $name isn't installed. Try apt-get install atom-$name\n";
    exit(1);
   }
 my $dest="$dir_dest/$name";
 if (-d $dest)
   {
    print "\nWarning: $name is already in your HOME ($dest)\n";
   }
 else
   {
    die "Failed to create link $dest" unless symlink($ori,$dest);
   }
 my $json=cat("$ori/package.json");
 my $text=decode_json($json);
 my $deps=$$text{'package-deps'};
 if ($deps)
   {
    foreach $dep (@$deps)
       {
        print "Package dependency: $dep\n";
        Process($dep);
       }
    print "\n";
   }
 else
   {
    print "No dependencies\n";
   }
}

sub Create
{
 unless (-d $dir_dest)
   {
    mkdir($dir_dest);
    die "Failed to create $dir_dest" unless -d $dir_dest;
   }
}

sub cat
{
 local $/;
 my $b;

 open(FIL,$_[0]) || return 0;
 $b=<FIL>;
 close(FIL);

 $b;
}


